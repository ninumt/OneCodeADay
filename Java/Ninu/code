Day 1:
Problem 1 : Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

Solution:


//Brute Force - o(n^2)
class Solution1 {
   public int[] twoSum(int[] nums, int target) {
      for (int i = 0; i < nums.length; i++) {
        for (int j = i + 1; j < nums.length; j++) {
            if (nums[j] == target - nums[i]) {
                return new int[] { i, j };
            }
        }
     }
    throw new IllegalArgumentException("No two sum solution");
  }
}





//2 Pass hastable(We traverse the list containing n elements exactly twice), space and time complexity -O(n)
class Solution2 {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> result= new HashMap<>();
        for(int i=0;i<nums.length;i++){
            result.put(nums[i],i);
        }
        for(int i=0;i<nums.length;i++){
            int comp = target - nums[i];
            if(result.containsKey(comp) && result.get(comp) !=i){
                return new int[]{i,result.get(comp)};
            } 
        }
        throw new IllegalArgumentException("no 2 sum solution");
    }
}





//Most optimised one(We traverse the list containing n elements exactly once)- 1 Pass HashTable , O(n)
class Solution3{
    public int[] twoSum(int[] nums, int target){
        HashMap<Integer, Integer> map=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            int comp = target - nums[i];
            if(map.containsKey(comp)){
                return new int[]{map.get(comp),i};
            }
            map.put(nums[i],i);
        }
        throw new IllegalArgumentException("no 2 sum solution");
    }
    
}


********************************************************************************
Day 2:
Problem 2: 
Solution:









********************************************************************************
Day 3:
Problem 3: 
